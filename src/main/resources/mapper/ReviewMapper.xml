<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foodmap.mapper.ReviewMapper">

    <select id="getReviewsByRestaurant" resultType="com.foodmap.entity.dto.ReviewDTO">
        SELECT
            r.id, r.content, r.compositeScore, r.userId AS userId,
            u.userName AS username, u.phone AS userAvatar,
            r.restaurantId AS restaurantId, s.shopName AS restaurantName,
            r.likeCount AS likeCount, r.createdAt AS createdAt, r.updatedAt AS updatedAt,
            r.status,
            CASE WHEN l.id IS NOT NULL THEN true ELSE false END AS userLiked
        FROM
            reviews r
                LEFT JOIN user u ON r.userId = u.userId
                LEFT JOIN shop s ON r.restaurantId = s.shopId
                LEFT JOIN likes l ON r.id = l.reviewId AND l.userId = #{userId}
        WHERE
            r.restaurantId = #{restaurantId}
          AND r.status = 'ACTIVE'
        ORDER BY
            r.createdAt DESC
    </select>

    <select id="getReviewsByUser" resultType="com.foodmap.entity.dto.ReviewDTO">
        SELECT
            r.id, r.content, r.compositeScore, r.userId AS userId,
            u.userName AS username, u.phone AS userAvatar,
            r.restaurantId AS restaurantId, s.shopName AS restaurantName,
            r.likeCount AS likeCount, r.createdAt AS createdAt, r.updatedAt AS updatedAt,
            r.status,
            CASE WHEN l.id IS NOT NULL THEN true ELSE false END AS userLiked
        FROM
            reviews r
                LEFT JOIN user u ON r.userId = u.userId
                LEFT JOIN shop s ON r.restaurantId = s.shopId
                LEFT JOIN likes l ON r.id = l.reviewId AND l.userId = #{currentUserId}
        WHERE
            r.userId = #{userId}
          AND r.status = 'ACTIVE'
        ORDER BY
            r.createdAt DESC
    </select>

    <select id="getReviewById" resultType="com.foodmap.entity.dto.ReviewDTO">
        SELECT
            r.id, r.content, r.compositeScore, r.userId AS userId,
            u.userName AS username, u.phone AS userAvatar,
            r.restaurantId AS restaurantId, s.shopName AS restaurantName,
            r.likeCount AS likeCount, r.createdAt AS createdAt, r.updatedAt AS updatedAt,
            r.status,
            CASE WHEN l.id IS NOT NULL THEN true ELSE false END AS userLiked
        FROM
            reviews r
                LEFT JOIN user u ON r.userId = u.userId
                LEFT JOIN shop s ON r.restaurantId = s.shopId
                LEFT JOIN likes l ON r.id = l.reviewId AND l.userId = #{userId}
        WHERE
            r.id = #{reviewId}
          AND r.status = 'ACTIVE'
    </select>

    <select id="calculateAverageRating" resultType="java.lang.Double">
        SELECT AVG(compositeScore)
        FROM reviews
        WHERE restaurantId = #{restaurantId}
          AND status = 'ACTIVE'
    </select>

    <select id="countActiveReviewsByRestaurant" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM reviews
        WHERE restaurantId = #{restaurantId}
          AND status = 'ACTIVE'
    </select>

    <update id="updateAllShopsRatings">
        UPDATE shop s
            INNER JOIN (
            SELECT
            restaurantId,
            ROUND(AVG(compositeScore), 1) AS compositeScore,
            ROUND(AVG(environmentScore), 1) AS environmentScore,
            ROUND(AVG(serviceScore), 1) AS serviceScore,
            ROUND(AVG(tasteScore), 1) AS tasteScore,
            COUNT(*) AS reviewCount
            FROM
            reviews
            WHERE
            status = 'ACTIVE'
            GROUP BY
            restaurantId
            ) r ON s.shopId = r.restaurantId
            SET
                s.compositeScore = r.compositeScore,
                s.environmentScore = r.environmentScore,
                s.serviceScore = r.serviceScore,
                s.tasteScore = r.tasteScore,
                s.reviewCount = r.reviewCount
    </update>

    <update id="updateShopRatings">
        UPDATE shop s
            INNER JOIN (
            SELECT
            restaurantId,
            ROUND(AVG(compositeScore), 1) AS compositeScore,
            ROUND(AVG(environmentScore), 1) AS environmentScore,
            ROUND(AVG(serviceScore), 1) AS serviceScore,
            ROUND(AVG(tasteScore), 1) AS tasteScore,
            COUNT(*) AS reviewCount
            FROM
            reviews
            WHERE
            status = 'ACTIVE' AND restaurantId = #{shopId}
            GROUP BY
            restaurantId
            ) r ON s.shopId = r.restaurantId
            SET
                s.compositeScore = r.compositeScore,
                s.environmentScore = r.environmentScore,
                s.serviceScore = r.serviceScore,
                s.tasteScore = r.tasteScore,
                s.reviewCount = r.reviewCount
    </update>

    <select id="findUnanalyzedReviews" resultType="java.util.Map">
        SELECT id, content, restaurant_id
        FROM reviews
        WHERE sentiment_analyzed = 0
          AND status = 'ACTIVE'
          AND content IS NOT NULL
          AND content != ''
        ORDER BY created_time DESC
            LIMIT #{limit}
    </select>

    <update id="markReviewsAsAnalyzed">
        UPDATE reviews
        SET sentiment_analyzed = 1
        WHERE id IN
        <foreach collection="reviewIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>